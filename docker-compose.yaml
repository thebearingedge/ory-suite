services:

  haproxy:
    image: docker.io/haproxytech/haproxy-alpine:2.9.7
    volumes:
      - ./services/haproxy/etc/haproxy:/etc/haproxy
      - ./certs/tls.pem:/etc/ssl/certs/tls.pem
    ports:
      - 127.0.0.1:80:80
      - 127.0.0.1:443:443
    networks:
      default:
        aliases:
          - pg.${DOMAIN_NAME}
          - smtp.${DOMAIN_NAME}
          - mail.${DOMAIN_NAME}
          - ${DOMAIN_NAME}
          - auth.${DOMAIN_NAME}
    healthcheck:
      test: for port in 25 80 443 5432; do /usr/bin/nc -z 127.0.0.1 $$port; done
      interval: 3s
      start_period: 3s
      retries: 10

  postgres:
    image: docker.io/library/postgres:16.2-alpine3.19
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DATABASES: ${POSTGRES_DATABASES}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./services/postgres/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
      - ./services/postgres/tmp:/tmp
    healthcheck:
      test: /tmp/healthcheck.sh
      interval: 5s
      start_period: 2s
      retries: 10

  mailpit:
    image: docker.io/axllent/mailpit:v1.17.0
    environment:
      MP_SMTP_AUTH: ${ADMIN_USERNAME}:${ADMIN_PASSWORD}
    volumes:
      - ./certs:/etc/mailpit/certs
    command:
      - --smtp-tls-cert
      - /etc/mailpit/certs/tls.crt
      - --smtp-tls-key
      - /etc/mailpit/certs/tls.key
      - --smtp-require-tls
    healthcheck:
      test: /usr/bin/wget --spider -q http://localhost:8025
      interval: 3s
      start_period: 3s
      retries: 10

  kratos_migrate:
    image: docker.io/oryd/kratos:v1.1.0-distroless
    environment:
      DSN: postgres://kratos:kratos@pg.${DOMAIN_NAME}/kratos?sslmode=disable
    volumes:
      - ./services/kratos/etc/kratos:/etc/kratos
    command: [
      --config, /etc/kratos/config.yaml,
      migrate, sql,
      --read-from-env,
      --yes
    ]
    depends_on:
      haproxy:
        condition: service_healthy
      postgres:
        condition: service_healthy

  kratos:
    image: docker.io/oryd/kratos:v1.1.0-distroless
    environment:
      DSN: postgres://kratos:kratos@pg.${DOMAIN_NAME}/kratos?sslmode=disable
      COURIER_SMTP_CONNECTION_URI: smtps://${ADMIN_USERNAME}:${ADMIN_PASSWORD}@smtp.${DOMAIN_NAME}:25
      LOG_LEVEL: trace
    volumes:
      - ${ROOT_CA_PEM}:/etc/ssl/certs/root-ca.pem
      - ./services/kratos/etc/kratos:/etc/kratos
    command: [
      serve,
      --config, /etc/kratos/config.yaml,
      --dev,
      --watch-courier
    ]
    depends_on:
      haproxy:
        condition: service_healthy
      postgres:
        condition: service_healthy
      kratos_migrate:
        condition: service_completed_successfully

  app:
    image: docker.io/oryd/kratos-selfservice-ui-node:v1.1.0
    environment:
      SECURITY_MODE: ""
      KRATOS_PUBLIC_URL: https://auth.local.test/
      KRATOS_BROWSER_URL: https://auth.local.test/
      COOKIE_SECRET: ${COOKIE_SECRET}
      CSRF_COOKIE_NAME: ${CSRF_COOKIE_NAME}
      CSRF_COOKIE_SECRET: ${CSRF_COOKIE_SECRET}
      NODE_EXTRA_CA_CERTS: /etc/ssl/certs/root-ca.pem
    volumes:
      - ${ROOT_CA_PEM}:/etc/ssl/certs/root-ca.pem

networks:
  default:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: compose0

volumes:
  pg_data:
